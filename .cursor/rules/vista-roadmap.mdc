---
description: 
globs: 
alwaysApply: true
---

You're the CTO of Vista. You're going to create Vista Education Adviser based on the model  openai-responses-starter-app repository, a clone of which you've been given to begin with. Create Vista according to the provided Roadmap.

# Vista Education Adviser PoC – Roadmap

The Vista Education Adviser Proof of Concept (PoC) will target core features with a lean, cost‐effective approach. The focus areas include:

- **Personalized Recommendation Engine:**  
  Provide tailored education/career paths based on a user's profile. Initially, use a simple rule‐based system to generate recommendations, with plans to incorporate AI‐driven logic later for more sophisticated matching.

- **AI Chatbot Guidance:**  
  Integrate an AI‐powered chatbot (using OpenAI's API) to answer user queries and offer guidance. This chatbot will simulate a counseling session, providing answers about programs, application tips, etc., and refine its responses by "learning" from conversation history.

- **User Authentication (Email & Social Login):**  
  Implement secure authentication. Support standard email/password sign-up (with hashed passwords) and social logins via Google and LinkedIn OAuth for quick onboarding, ensuring a unified user account regardless of sign‐in method.

- **External Integrations:**  
  Enhance user profiles and recommendations by importing external data.  
  • Allow LinkedIn profile import (education, experience) via OAuth2 with proper permissions.  
  • Optionally, perform Google searches (using the Custom Search API) to fetch program details or rankings.  
  • Enable document uploads (transcripts, SOPs) for completeness.  
  These integrations will be modular and optional, enriching the experience without blocking core functionality if unavailable.

- **Cost-Efficient Deployment:**  
  Deploy the PoC on minimal-cost tiers.  
  • Use **Vercel** for hosting the entire Next.js application (both frontend and API routes).  
  • Leverage Vercel's free tier and optimized Next.js support for unified deployment.  
  Vercel's free-tier limitations will be monitored to ensure cost efficiency.

---

## 1. Blueprint for the PoC

### A. Requirements Gathering & System Overview

- **User Stories & Use Cases:**
  - **Registration & Onboarding:**  
    Users can sign up using email/password or social logins (Google and LinkedIn). After sign-up, they complete a profile by entering personal, educational, and career information (or by importing data from LinkedIn).
  - **Personalized Recommendations:**  
    After profile completion, users can request education/career path recommendations via a rule-based matching engine that filters a sample dataset based on attributes (e.g. field of interest, preferred country, budget).
  - **Chatbot Guidance:**  
    Users interact with an AI-powered chatbot to ask questions about programs, application tips, etc. The chatbot calls third-party AI APIs (OpenAI, Anthropic) and returns natural-language responses.
  - **Document Uploads:**  
    Users can upload documents (transcripts, SOPs) to be processed or stored as part of their profile.

- **Data Flow & Services:**
  - **Authentication & User Management:**  
    User data is stored securely in OpenAI Vector Store. The authentication service issues Supabase tokens for API calls.
  - **Profile Management:**  
    User profiles (personal details, education, career goals) are maintained by a dedicated API route, optionally enriched via LinkedIn import.
  - **Recommendation Engine:**  
    Processes the user's profile with a rule-based engine to filter and rank a set of pre-defined education programs, returning a list of suggestions.
  - **AI Chatbot Service:**  
    Accepts user queries, composes prompts (with context), calls a third-party AI API (OpenAI/Anthropic), and returns a natural-language response.
  - **External Integrations:**  
    • **LinkedIn Import:** Uses OAuth2 to fetch basic profile data and pre-populate user profiles.  
    • **Google Custom Search:** Optionally enriches program details.  
    • **File Uploads:** Accepts user document uploads for processing or reference.

- **Security & GDPR Compliance:**  
  - **Data Minimization:** Only essential data is stored.  
  - **User Consent:** Explicit consent is obtained for social data import and file uploads.  
  - **Data Protection:** Use HTTPS, encrypt sensitive data at rest, hash passwords, and support user data deletion.

- **Deployment Environment:**
  - **Unified Application:** Hosted on Vercel for cost efficiency and fast global CDN.
  - **Data Storage:** OpenAI Vector Store for data persistence.
  - **Future-Proofing:** Architecture is modular to support future migration to FastAPI microservices with PostgreSQL when scaling beyond PoC.

---

### B. System Architecture Overview

The PoC is structured as a Next.js monorepo with API routes for backend functionality:

- **API Routes (Next.js):**
  - `/api/auth/` – Handles authentication (registration, login, social OAuth callbacks).
  - `/api/profile/` – Manages user profile creation, updates, and LinkedIn import.
  - `/api/recommendations/` – Processes user profiles and returns tailored recommendations using rule-based logic.
  - `/api/chatbot/` – Forwards user queries to third-party AI APIs and returns AI-generated responses.
  - `/api/uploads/` – Handles file uploads for transcripts/SOPs.
  - `/api/vector_stores/` - Manages operations for data persistence with OpenAI Vector Store.

- **Frontend (Next.js with TypeScript):**
  - **Pages:** Login, signup, profile setup, recommendations, and chatbot interaction.
  - **Components:** Reusable UI elements such as forms, recommendation cards, and chat windows.

- **Data Layer:**
  - **Storage:** OpenAI Vector Store for data persistence (user profiles, documents, recommendations).
  - **Caching (optional):** In-memory caching for frequent API responses to optimize costs and response times.

- **Third-Party Services:**
  - **AI API:** OpenAI/Anthropic for chatbot responses.
  - **LinkedIn API:** For social profile import.
  - **Google Custom Search:** For enriching program details.

- **API Design:**
  - Services are organized as Next.js API routes in a monorepo structure.
  - TypeScript interfaces ensure type safety acroSupabasefrontend and API code.
  - The application uses middleware for logging, Supabase authentication, and error handling.

---

## 2. Revised Project Directory Structure

```
vista-education-adviser/          # Root of the project repository
├── app/                         # Next.js App Router structure
│   ├── api/                     # API routes for backend functionality
│   │   ├── auth/                # Authentication module
│   │   │   └── route.ts         # Endpoints for login, signup, OAuth callbacks
│   │   ├── profile/             # User profile management
│   │   │   └── route.ts         # Endpoints for profile CRUD and LinkedIn import
│   │   ├── recommendations/     # Recommendation service endpoints
│   │   │   └── route.ts         # Endpoint to generate recommendations
│   │   ├── chatbot/             # AI Chatbot endpoints
│   │   │   └── route.ts         # Endpoint to handle user queries
│   │   ├── uploads/             # File upload endpoints for transcripts/SOPs
│   │   │   └── route.ts         # Handles file uploads
│   │   └── vector_stores/       # Vector store operations
│   │       ├── services/        # Vector store service implementations
│   │       ├── create_store/    # Create vector store endpoints
│   │       ├── upload_file/     # Upload files to vector store
│   │       └── retrieve_store/  # Retrieve data from vector store
│   ├── (auth)/                  # Auth-related routes grouped
│   │   ├── login/               # Login page
│   │   │   └── page.tsx
│   │   └── signup/              # Signup page
│   │       └── page.tsx
│   ├── profile/                 # Profile pages
│   │   └── page.tsx             # Profile setup and management
│   ├── recommendations/         # Recommendation pages
│   │   └── page.tsx             # Page to display recommendations
│   ├── chat/                    # Chatbot interaction
│   │   └── page.tsx             # Chat interface
│   ├── layout.tsx               # Root layout with providers
│   └── page.tsx                 # Landing page
├── components/                  # Reusable UI components
│   ├── auth/                    # Authentication components
│   │   ├── LoginForm.tsx
│   │   └── SignupForm.tsx
│   ├── profile/                 # Profile components
│   │   └── ProfileForm.tsx
│   ├── recommendations/         # Recommendation components
│   │   └── RecommendationCard.tsx
│   ├── chatbot/                 # Chatbot UI components
│   │   ├── ChatWindow.tsx
│   │   └── ChatMessage.tsx
│   └── ui/                      # Common UI components
│       └── Navbar.tsx
├── lib/                         # Shared utilities and helpers
│   ├── vector-store/            # Vector store client and utilities
│   ├── auth/                    # Authentication utilities
│   └── api-client/              # API client functions for frontend
├── types/                       # TypeScript type definitions
├── config/                      # Configuration files
├── public/                      # Public assets
├── styles/                      # Global CSS or Tailwind utilities
├── memory-bank/                 # Project documentation
├── next.config.mjs              # Next.js configuration
├── package.json                 # NPM dependencies and scripts
├── tsconfig.json                # TypeScript configuration
└── .env.local                   # Environment variables (local)
```

---

## 3. How Data and Services Work Together

### User Flow & Data Interaction

1. **User Authentication & Onboarding:**
   - **Frontend:**  
     - User visits the landing page, then chooses to sign up/login (email/password or social).
     - Authentication forms (from `components/auth/`) send requests to `/api/auth/` endpoints.
   - **Backend:**  Supabase
     - Authentication API routes validate credentials, create user records in Vector Store, and return a Supabase.
     - OAuth flows (handled in `/api/auth/`) import social data (e.g., LinkedIn).

2. **Profile Completion & Data Storage:**
   - **Frontend:**  
     - After login, users fill out a multi-step profile form (`ProfileForm.tsx`), optionally importing data from LinkedIn.
   - **Backend:**  
     - Profile API route (`/api/profile/`) validates and stores profile data in Vector Store.

3. **Generating Recommendations:**
   - **Frontend:**  
     - On the recommendations page (`recommendations/page.tsx`), the user requests tailored education/career suggestions.
   - **Backend:**  
     - Recommendation API route (`/api/recommendations/route.ts`) uses a rule-based engine to filter and rank pre-defined programs, returning suggestions.

4. **Chatbot Interaction:**
   - **Frontend:**  
     - The Chatbot UI (`ChatWindow.tsx`) allows users to submit questions.
   - **Backend:**  
     - Chatbot API route (`/api/chatbot/route.ts`) forwards queries to OpenAI and returns AI-generated responses.

5. **Document Uploads:**
   - **Frontend:**  
     - Users can upload documents via file inputs.
   - **Backend:**  
     - Upload API route (`/api/uploads/route.ts`) handles file reception and storage in Vector Store.

6. **Data Security & Compliance:**Supabase
   - All API routes are secured with Supabase tokens and proper input validation.
   - Sensitive data is encrypted and handled according to GDPR requirements.

## 4. Future Migration Path

While the PoC uses Next.js API routes with OpenAI Vector Store for simplicity and rapid development, the architecture is designed to support future migration:

- **Backend Migration:** When scaling beyond PoC, transition from Next.js API routes to FastAPI microservices
- **Database Migration:** Move from OpenAI Vector Store to PostgreSQL with SQLAlchemy ORM
- **Deployment Evolution:** Maintain frontend on Vercel, while moving backend services to Heroku or similar

This migration path allows us to start simple for the PoC while ensuring the architecture can evolve to support larger scale and more complex requirements in the future.



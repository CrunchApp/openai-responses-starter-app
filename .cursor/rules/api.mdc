---
description: Guidelines for Backend API Architecture and Development Guidelines creating typesafe apis on hono restful API
globs: 
alwaysApply: false
---
---
description: Guidelines for Backend API Architecture and Development Guidelines creating typesafe apis on hono restful API
globs: 
alwaysApply: false
---
# Vista Education Adviser â€“ Backend API Architecture & Development Guidelines

You are an expert TypeScript engineer specializing in building modern, type-safe APIs using Next.js API routes. Your expertise covers Next.js API routes for HTTP endpoints, Supabase, OpenAI Vector Store for data persistence, and TypeScript interfaces for type safety and validation. This document outlines the backend API architecture and provides development guidelines for the Vista Education Adviser PoC.

---

## Core Architecture

Vista Education Adviser is designed as a monorepo Next.js application that exposes RESTful API routes for key functionalities such as:

- **User Authentication & Profile Management:**  
  Secure registration/login (via email/password and social OAuth for Google/LinkedIn), and profile CRUD operations.
  
- **Personalized Recommendation Engine:**  
  A rule-based system that processes user profiles to generate tailored education/career recommendations.

- **AI Chatbot Service:**  
  An endpoint to forward user queries to third-party AI APIs (e.g., OpenAI/Anthropic) and return natural language responses.

- **Document Uploads:**  
  Endpoints that enable users to upload files (transcripts, SOPs) for processing or storage.

These services interact with Supabase and the OpenAI Vector Store for data persistence. TypeScript interfaces ensure runtime type safety and data validation. Logging and error handling are implemented uniformly to maintain consistency and aid troubleshooting.

---

## Tech Stack

- **Server & Routing:** Next.js API Routes  
- **Database:** Supabase and OpenAI Vector Store for data persistence
- **Frontend Integration:** Next.js with React Query (same monorepo)
- **Authentication:** Supabase-based authentication, with OAuth flows for Google and LinkedIn  
- **Validation:** TypeScript interfaces and Zod for validation
- **Logging:** Custom logger built on top of console or a dedicated logging library
- **Transport:** HTTP via Vercel deployment

---

## Module Development Guidelines

### 1. Data Layer
- **Vector Store Operations:**  
  - Implement wrapper functions in `app/api/vector_stores/services/` for CRUD operations.
  - Structure data with appropriate metadata for effective retrieval.
- **Type Safety & Validation:**  
  - Create TypeScript interfaces in the relevant module's directory for request and response validation.
  - Example:
    ```typescript
    // app/api/profile/types.ts
    export interface UserProfile {
      id: string;
      email: string;
      fullName: string;
      education?: string;
      // Add other fields as required
    }
    ```

### 2. Service Layer (e.g., `app/api/recommendations/service.ts`)
- **Implement Business Logic:**  
  - Write functions that perform vector store operations and complex business logic.
  - Use the vector store client from a centralized location.
  - Return strongly typed responses using TypeScript interfaces.
- **Example Implementation:**
  ```typescript
  // app/api/recommendations/service.ts
  import { vectorStoreClient } from '../vector_stores/services/client';
  import { Recommendation, UserProfile } from './types';

  export async function generateRecommendations(userProfile: UserProfile): Promise<Recommendation[]> {
    // Simple rule-based filtering logic (to be enhanced later)
    const recommendations = await vectorStoreClient.search({
      query: userProfile.interest,
      collection: 'recommendations'
    });
    
    return recommendations.map(item => ({
      id: item.id,
      programName: item.metadata.programName,
      institution: item.metadata.institution,
      matchScore: calculateMatchScore(userProfile, item.metadata),
      // other fields
    }));
  }

  function calculateMatchScore(profile: UserProfile, program: any): number {
    // Implement scoring logic
    return 85; // Example score
  }
  ```

### 3. API Route Layer (e.g., `app/api/recommendations/route.ts`)
- **Define Endpoints with Next.js:**
  - Create API routes using the Next.js App Router conventions.
  - Use TypeScript interfaces for request and response typing.
  - Implement middleware for authentication and error handling.
- **Example Implementation:**
  ```typescript
  // app/api/recommendations/route.ts
  import { NextRequest, NextResponse } from 'next/server';
  import { generateRecommendations } from './service';
  import { getCurrentUser } from '../auth/service';
  import { RecommendationRequest } from './types';

  export async function POST(req: NextRequest) {
    try {
      const currentUser = await getCurrentUser(req);
      
      if (!currentUser) {
        return NextResponse.json(
          { error: 'Unauthorized' },
          { status: 401 }
        );
      }
      
      const data: RecommendationRequest = await req.json();
      const recommendations = await generateRecommendations({
        ...currentUser.profile,
        ...data
      });
      
      return NextResponse.json(recommendations);
    } catch (error) {
      console.error('Error generating recommendations:', error);
      return NextResponse.json(
        { error: 'Failed to generate recommendations' },
        { status: 500 }
      );
    }
  }
  ```

### 4. Prompt & Tool Integration

**Prompt Templates:**
Define reusable prompt templates in `app/api/prompts/`.
Accept parameters, validate them, and return a formatted message template.

**Tool Implementations:**
Register tools with proper input validation using TypeScript interfaces or Zod schemas.
Ensure that only permitted operations are executed.
Log errors and return structured error responses.

### 5. Logging & Error Handling

**Structured Logging:**
Use a custom logger or a third-party logging library to log key events and errors.
Log each API call with timestamp and context.

**Error Responses:**
Return consistent HTTP error responses with proper status codes and error messages.
Sanitize error messages to avoid leaking sensitive details.

### 6. Transport & Deployment

**Transport Setup:**
Deploy the monorepo to Vercel, which optimizes Next.js applications.
Configure appropriate environment variables in the Vercel dashboard.

**Environment Variables:**
Manage secrets (API keys, Supabase secret) through environment variables accessible in API routes.

## Frontend Integration Guidelines

### API Client
Create a type-safe API client in the frontend using React Query.
Use a common folder (e.g., `app/api-client/`) to define API hooks that mirror API routes.

Example:
```typescript
// app/api-client/recommendations.ts
import { useQuery, useMutation } from "react-query";
import axios from "axios";
import { Recommendation, RecommendationRequest } from "@/app/api/recommendations/types";

export async function getRecommendations(data: RecommendationRequest) {
  const response = await axios.post<Recommendation[]>("/api/recommendations", data);
  return response.data;
}

export function useRecommendations(data: RecommendationRequest) {
  return useQuery(["recommendations", data], () => getRecommendations(data));
}
```

#### Error Handling & Caching
Handle API errors gracefully and display appropriate messages.
Leverage React Query's caching and refetching mechanisms to optimize UI responsiveness.

## Package & Monorepo Management

### Package Manager
Use npm or yarn as the package manager for the monorepo.
Install dependencies with `npm install [package]` or `yarn add [package]`.

### Monorepo Setup
The project is structured as a Next.js monorepo with both frontend and API routes.
All code lives in the same repository, with shared types and utilities.

## Development Guidelines

### Running Scripts

#### Local Development
Run the development server with `npm run dev` or `yarn dev`.
This will start both the frontend and API routes for local development.

### Type Safety

#### Data Validation
Use TypeScript interfaces or Zod schemas for request and response validation.
Share types between frontend components and API routes.

### Error Handling

#### Consistent HTTP Responses
Implement error handlers that return structured error objects.
Use proper HTTP status codes for success and failure responses.

#### Logging
Use a consistent logging approach across all API routes.

### Authentication & Authorization

#### Supabase Authentication
Implement middleware to validate Supabase tokens in API routes.
Store user context in session or use stateless Supabase tokens.

### API Design Principles

#### RESTful Conventions
Use consistent naming patterns and resource-based API routes.
Validate all incoming requests with TypeScript or Zod.
Delegate business logic to the service layer.

### Vector Store Operations

#### Best Practices
Implement wrapper functions for vector store operations.
Structure data with appropriate metadata for effective retrieval.
Use caching strategies to improve performance.

### Developer Workflow

#### Creating a New Module

##### Module Setup
Create a new folder under `app/api/[module]/`.
Define the API route in `route.ts`, implement business logic in `service.ts`, and create TypeScript interfaces in `types.ts`.

##### Frontend Integration
Create a corresponding API client file in `app/api-client/[module].ts` using React Query hooks.

### Testing & Code Quality

#### Unit & Integration Tests
Use Jest for testing API routes and services. Create test files in a `__tests__` directory.

#### Code Style
Use consistent naming conventions and formatting.
Maintain strict type safety with TypeScript.

#### Error Handling
Consistently handle and log errors across all API routes.

### Example API Workflow

Below is a complete example for a "posts" module:

1. TypeScript Interfaces (app/api/posts/types.ts)
```typescript
export interface Post {
  id: string;
  title: string;
  content: string;
  userId: string;
  createdAt: string;
}

export interface CreatePostRequest {
  title: string;
  content: string;
}

export interface PostResponse {
  post: Post;
}
```

2. Service Layer (app/api/posts/service.ts)
```typescript
import { vectorStoreClient } from '../vector_stores/services/client';
import { Post, CreatePostRequest } from './types';
import { v4 as uuidv4 } from 'uuid';

export async function getPosts(): Promise<Post[]> {
  const results = await vectorStoreClient.search({
    collection: 'posts',
    query: '*'
  });
  
  return results.map(item => ({
    id: item.id,
    title: item.metadata.title,
    content: item.metadata.content,
    userId: item.metadata.userId,
    createdAt: item.metadata.createdAt
  }));
}

export async function createPost(data: CreatePostRequest, userId: string): Promise<Post> {
  const newPost: Post = {
    id: uuidv4(),
    title: data.title,
    content: data.content,
    userId,
    createdAt: new Date().toISOString()
  };
  
  await vectorStoreClient.upsert({
    collection: 'posts',
    id: newPost.id,
    metadata: newPost,
    content: `${newPost.title} ${newPost.content}`
  });
  
  return newPost;
}
```

3. API Route Layer (app/api/posts/route.ts)
```typescript
import { NextRequest, NextResponse } from 'next/server';
import { getPosts, createPost } from './service';
import { getCurrentUser } from '../auth/service';
import { CreatePostRequest } from './types';

export async function GET(req: NextRequest) {
  try {
    const currentUser = await getCurrentUser(req);
    
    if (!currentUser) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const posts = await getPosts();
    return NextResponse.json(posts);
  } catch (error) {
    console.error('Error fetching posts:', error);
    return NextResponse.json(
      { error: 'Failed to fetch posts' },
      { status: 500 }
    );
  }
}

export async function POST(req: NextRequest) {
  try {
    const currentUser = await getCurrentUser(req);
    
    if (!currentUser) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      );
    }
    
    const data: CreatePostRequest = await req.json();
    const post = await createPost(data, currentUser.id);
    
    return NextResponse.json({ post }, { status: 201 });
  } catch (error) {
    console.error('Error creating post:', error);
    return NextResponse.json(
      { error: 'Failed to create post' },
      { status: 500 }
    );
  }
}
```

4. Frontend API Client (app/api-client/posts.ts)
```typescript
import { useQuery, useMutation, useQueryClient } from "react-query";
import axios from "axios";
import { Post, CreatePostRequest, PostResponse } from "@/app/api/posts/types";

export async function getPosts() {
  const response = await axios.get<Post[]>("/api/posts");
  return response.data;
}

export function usePosts() {
  return useQuery("posts", getPosts);
}

export async function createPost(data: CreatePostRequest) {
  const response = await axios.post<PostResponse>("/api/posts", data);
  return response.data;
}

export function useCreatePost() {
  const queryClient = useQueryClient();
  
  return useMutation(createPost, {
    onSuccess: () => {
      queryClient.invalidateQueries("posts");
    }
  });
}
```

## Future Migration Path

While the current architecture uses Next.js API routes with OpenAI Vector Store, there is a planned migration path to FastAPI microservices with PostgreSQL for scaling beyond the PoC phase. The current architecture is designed with this future migration in mind, maintaining clean separation of concerns and strong typing to facilitate the transition.






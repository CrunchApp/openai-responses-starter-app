---
description: Database rules for working with databases, drizzle schemas and creating backend apis
globs: 
alwaysApply: false
---
You are an expert database architect with extensive experience in designing robust, scalable schemas for modern applications. For the Vista Education Adviser PoC, adhere to the following database rules and conventions:

## Data Types and Field Conventions

### String Types over Enums
Use Drizzleâ€™s string types instead of enums for better flexibility.

**Example:**
```ts
status: text("status").$type<pending | cancelled | error>().notNull()
```

### Text vs. Varchar
- **IDs**: Use `varchar` for id fields (as in the users table) to maintain consistency.
- **Other Fields**: Use `text` for all other string fields unless a length restriction is necessary.

## ID Generation and Table Naming Conventions

### New Table Creation

Leverage the `ID` utility in `packages/id/src/generate.ts` when creating a new table.

#### Prefixes
Use the predefined prefixes to ensure unique and consistent id generation.

**Example:**
```ts
// packages/id/generate.ts

const prefixes = {
  post: "post",
  property: "prop",
  // Add new prefixes here
} as const;
```

#### Adding New Tables
Simply add a new key (with an abbreviated value if needed) for your table. No changes to nanoid or other logic are required.

### Schema Integration

Use the generated IDs in your schema definition within `packages/db/schema.ts`.

**Example:**
```ts
export const properties = pgTable("properties", {
  id: varchar("id", { length: 255 })
    .primaryKey()
    .$defaultFn(() => newId("property"))
  // ... other fields
});
```

## Special Considerations

### Users Table
Do not include extraneous fields such as avatar or name unless specifically required for synchronization via Clerk.


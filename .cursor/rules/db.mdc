---
description: Database rules for working with Supabase and creating backend apis
globs: 
alwaysApply: false
---
---
description: Database rules for working with Supabase and creating backend apis
globs: 
alwaysApply: false
---
# You are an expert in data storage and retrieval systems with extensive experience in designing robust, scalable data models for modern applications. For the Vista Education Adviser PoC, adhere to the following data storage rules and conventions:

## Data Storage Technology

### OpenAI Vector Store
Vista Education Adviser currently uses OpenAI Vector Store for data persistence:

- **Vector Store Operations**: Implement in `app/api/vector_stores/services/` directory
- **Data Structure**: Organize data with appropriate metadata for effective retrieval
- **TypeScript Interfaces**: Define in relevant module directories for type safety

## Data Organization

### Collection Structure
Organize data into logical collections within the vector store:

**Example:**
```typescript
// Collections for different entity types
const COLLECTIONS = {
  USERS: 'users',
  PROFILES: 'profiles',
  EDUCATION: 'education',
  RECOMMENDATIONS: 'recommendations',
  DOCUMENTS: 'documents'
};
```

### Field Conventions
- **IDs**: Use UUID v4 for primary identifiers to ensure uniqueness
- **Metadata**: Store searchable attributes as metadata fields
- **Content**: Store full-text searchable content for vector embedding
- **Timestamps**: Include created_at and updated_at fields for all records

## ID Generation and Naming Conventions

### ID Generation

Use UUID v4 for primary identifiers to ensure uniqueness across distributed systems:

**Example:**
```typescript
import { v4 as uuidv4 } from 'uuid';

// In a service file
const newRecord = {
  id: uuidv4(),
  // other fields
};
```

### Collection Naming

- Use plural, lowercase names for collections
- Use camelCase for field names in metadata

**Example:**
```typescript
// Collection name is plural and lowercase
const collection = 'users';

// Field names are camelCase
const user = {
  id: '123e4567-e89b-12d3-a456-426614174000',
  firstName: 'John',
  lastName: 'Doe',
  emailAddress: 'john.doe@example.com'
};
```

## Relationships

Define clear relationships between entities using consistent reference patterns:

**Example:**
```typescript
// One-to-many relationship: User to Recommendations
// Store the user ID with each recommendation
const recommendation = {
  id: uuidv4(),
  userId: '123e4567-e89b-12d3-a456-426614174000', // Reference to user
  programName: 'Computer Science',
  institution: 'Harvard University',
  matchScore: 85
};

// Many-to-many relationship: Use an array of references
const profile = {
  id: uuidv4(),
  userId: '123e4567-e89b-12d3-a456-426614174000',
  preferredProgramIds: [
    '789e4567-e89b-12d3-a456-426614174123',
    '456e4567-e89b-12d3-a456-426614174456'
  ]
};
```

## Data Query Patterns

### Basic Queries
Implement wrapper functions for common query operations:

**Example:**
```typescript
// Get a single record by ID
async function getRecordById(collection: string, id: string) {
  const record = await vectorStoreClient.get({
    collection,
    id
  });
  return record;
}

// Search records by metadata fields
async function searchRecords(collection: string, filters: Record<string, any>) {
  const results = await vectorStoreClient.search({
    collection,
    filter: filters
  });
  return results;
}
```

### Vector Similarity Search
Leverage vector embeddings for intelligent recommendations:

**Example:**
```typescript
// Search for similar programs based on user profile
async function findSimilarPrograms(userProfile: UserProfile) {
  const query = `${userProfile.interests.join(' ')} ${userProfile.careerGoals} ${userProfile.fieldOfStudy}`;
  
  const results = await vectorStoreClient.similaritySearch({
    collection: 'programs',
    query,
    k: 10 // Number of results to return
  });
  
  return results;
}
```

## Special Considerations

### Users Collection
Include only authentication-related fields in the User data, with profile-specific fields in separate Profile data:

**Example:**
```typescript
// User data for authentication
const user = {
  id: uuidv4(),
  email: 'user@example.com',
  passwordHash: '$2b$10$...', // Properly hashed password
  isActive: true,
  authProvider: 'email', // 'email', 'google', 'linkedin'
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString()
};

// Separate profile data
const profile = {
  id: uuidv4(),
  userId: user.id, // Reference to user
  firstName: 'John',
  lastName: 'Doe',
  dateOfBirth: '1990-01-01',
  nationality: 'US',
  // other profile fields
};
```

### Document Storage
For uploaded documents, store metadata in the vector store and the actual document content as embeddings:

**Example:**
```typescript
// Document metadata
const document = {
  id: uuidv4(),
  userId: '123e4567-e89b-12d3-a456-426614174000',
  fileName: 'transcript.pdf',
  fileType: 'application/pdf',
  fileSize: 245789, // in bytes
  uploadedAt: new Date().toISOString(),
  description: 'University transcript'
};

// Store document content with embedding
async function storeDocumentWithEmbedding(documentId: string, content: string) {
  await vectorStoreClient.upsert({
    collection: 'document_content',
    id: documentId,
    metadata: { documentId },
    content // This will be automatically embedded
  });
}
```

## Data Validation

Use TypeScript interfaces and Zod schemas to enforce data structure and validation:

**Example:**
```typescript
import { z } from 'zod';

// TypeScript interface
export interface UserProfile {
  id: string;
  userId: string;
  firstName: string;
  lastName: string;
  dateOfBirth?: string;
  // other fields
}

// Zod schema for validation
export const UserProfileSchema = z.object({
  id: z.string().uuid(),
  userId: z.string().uuid(),
  firstName: z.string().min(1).max(100),
  lastName: z.string().min(1).max(100),
  dateOfBirth: z.string().datetime().optional(),
  // other fields with validation
});

// Validate data before storage
function validateUserProfile(data: unknown): UserProfile {
  return UserProfileSchema.parse(data);
}
```

## Future Migration Path

While the current architecture uses OpenAI Vector Store, there is a planned migration path to PostgreSQL with SQLAlchemy ORM when scaling beyond the PoC phase. Keep this in mind when designing data structures and access patterns:

- Use consistent ID generation (UUID v4) that will work in both systems
- Maintain clear entity relationships that can be mapped to relational database tables
- Document data structures thoroughly to facilitate future migration
- Consider using a data access layer pattern that can be updated to use SQLAlchemy in the future
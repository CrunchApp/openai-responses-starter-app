---
description: Guidelines for Backend API Architecture and Development Guidelines creating typesafe apis on hono restful API
globs: 
alwaysApply: false
---
# Vista Education Adviser – Backend API Architecture & Development Guidelines

You are an expert Python backend engineer specializing in building modern, type-safe APIs using FastAPI and SQLAlchemy. Your expertise covers FastAPI for HTTP routing, SQLAlchemy with Alembic for database operations on PostgreSQL, and Pydantic for request/response validation. This document outlines the backend API architecture and provides development guidelines for the Vista Education Adviser PoC.

---

## Core Architecture

Vista Education Adviser is designed as a modular FastAPI application that exposes RESTful endpoints for key functionalities such as:

- **User Authentication & Profile Management:**  
  Secure registration/login (via email/password and social OAuth for Google/LinkedIn), and profile CRUD operations.
  
- **Personalized Recommendation Engine:**  
  A rule-based system that processes user profiles to generate tailored education/career recommendations.

- **AI Chatbot Service:**  
  An endpoint to forward user queries to third-party AI APIs (e.g., OpenAI/Anthropic) and return natural language responses.

- **Document Uploads:**  
  Endpoints that enable users to upload files (transcripts, SOPs) for processing or storage.

These services interact with a PostgreSQL database through SQLAlchemy ORM. Pydantic models ensure runtime type safety and data validation. Logging and error handling are implemented uniformly to maintain consistency and aid troubleshooting.

---

## Tech Stack

- **Server & Routing:** FastAPI  
- **Database ORM:** SQLAlchemy with Alembic for migrations (using PostgreSQL)  
- **Frontend Integration:** Next.js with React Query  
- **Authentication:** JWT-based authentication, with OAuth flows for Google and LinkedIn  
- **Validation:** Pydantic  
- **Logging:** Python's logging module (or a custom logger)  
- **Transport:** HTTP via Uvicorn (initially deployed using Heroku for the backend)

---

## Module Development Guidelines

### 1. Database Layer
- **Schema Updates:**  
  - When a new column or table is needed, update the SQLAlchemy models in `app/models/` (e.g., add fields to `user.py`).
  - Update migration scripts in the `migrations/` directory using Alembic.
- **Type Safety & Validation:**  
  - Create corresponding Pydantic schemas in the relevant module’s `schemas.py` for request and response validation.
  - Example:
    ```python
    # app/api/profile/schemas.py
    from pydantic import BaseModel, EmailStr

    class UserProfile(BaseModel):
        id: int
        email: EmailStr
        full_name: str
        education: str | None = None
        # Add other fields as required
    ```

### 2. Service Layer (e.g., `recommendation_service.py`)
- **Implement Business Logic:**  
  - Write functions that perform database queries and complex operations.
  - Use the database connection from `core/config.py` and models from `models/`.
  - Return strongly typed responses (using Pydantic models).
- **Example Implementation:**
  ```python
  # app/services/recommendation_service.py
  from app.core.db import session
  from app.models.recommendation import Recommendation
  from app.api.recommendations.schemas import RecommendationResponse

  async def generate_recommendations(user_profile: dict) -> list[RecommendationResponse]:
      # Simple rule-based filtering logic (to be enhanced later)
      recommendations = session.query(Recommendation).filter(
          Recommendation.field == user_profile.get("interest")
      ).all()
      return [RecommendationResponse.from_orm(r) for r in recommendations]

3. Route Layer (e.g., routes.py in each module)
Define Endpoints with FastAPI:
Create a router for each module using FastAPI’s APIRouter.
Use Pydantic models to validate request bodies and responses.
Apply dependency injections for authentication (e.g., JWT-based).

Example Implementation:
```python
# app/api/recommendations/routes.py
from fastapi import APIRouter, Depends, HTTPException
from app.services.recommendation_service import generate_recommendations
from app.api.recommendations.schemas import RecommendationRequest, RecommendationResponse
from app.core.security import get_current_user

router = APIRouter()

@router.post("/", response_model=list[RecommendationResponse])
async def get_recommendations(
    request: RecommendationRequest,
    current_user: dict = Depends(get_current_user)
):
    try:
        recommendations = await generate_recommendations(current_user)
        return recommendations
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

4. Prompt & Tool Integration

**Prompt Templates:**
Define reusable prompt templates (e.g., analyze_data) in `app/api/prompts/`.
Accept parameters, validate them, and return a formatted message template.

**Tool Implementations:**
Register tools (e.g., `run_query`) with proper input validation using Pydantic.
Ensure that only permitted operations (e.g., SELECT queries) are executed.
Log errors and return structured error responses.

5. Logging & Error Handling

**Structured Logging:**
Use Python’s `logging` module (or a custom logger in `app/core/logger.py`) to log key events and errors.
Log each API call with timestamp and context.

**Error Responses:**
Return HTTP errors using FastAPI’s `HTTPException` with consistent status codes and error messages.
Sanitize error messages to avoid leaking sensitive details.

6. Transport & Deployment

**Transport Setup:**
Initially deploy using Uvicorn (e.g., `uvicorn app.main:app --host 0.0.0.0 --port $PORT`).
Ensure the app is deployable on Heroku using a `Procfile`.

**Environment Variables:**
Manage secrets (database URL, API keys) through environment variables loaded in `app/core/config.py`.

## Frontend Integration Guidelines

### API Client
Create a type-safe API client in the frontend (Next.js) using React Query.
Use a common folder (e.g., `frontend/src/api/`) to define API hooks that mirror backend endpoints.

Example (`posts.api.ts`):
```typescript
import { useQuery, useMutation } from "react-query";
import axios from "axios";

export async function getRecommendations() {
  const response = await axios.post("/api/recommendations/");
  return response.data;
}

export function useRecommendations() {
  return useQuery("recommendations", getRecommendations);
}
```

#### Error Handling & Caching
Handle API errors gracefully and display appropriate messages.
Leverage React Query’s caching and refetching mechanisms to optimize UI responsiveness.

## Package & Monorepo Management

### Package Manager
Use pipenv or Poetry as the primary package manager for the Python backend.
Install dependencies with `pipenv install [package]` or `poetry add [package]`.

### Monorepo Setup
The project uses TurboRepo to manage the monorepo (backend and frontend).
Run the entire project with `turbo dev` from the root folder.

## Development Guidelines

### Running Scripts

#### Script Execution
Use Uvicorn to run FastAPI scripts (e.g., `uvicorn app.main:app --reload`).
For production, configure the `Procfile` for Heroku deployment.

### Type Safety

#### Data Validation
Use Pydantic models for request and response validation.
Share types between frontend and backend where possible.

### Error Handling

#### Consistent HTTP Responses
Implement error handlers that return structured error objects.
Use proper HTTP status codes for success and failure responses.

#### Logging
Use the custom logger (from `app/core/logger.py`) for error and info logging.

### Authentication & Authorization

#### JWT Authentication
Use dependency injection (e.g., FastAPI’s Depends) to enforce authentication.
Validate user permissions at the route level using custom middleware.

### API Design Principles

#### RESTful Conventions
Use consistent naming patterns and resource-based endpoints.
Validate all incoming requests with Pydantic.
Delegate business logic to the service layer.

### Database Operations

#### ORM Best Practices
Use SQLAlchemy for all database operations.
Handle migrations with Alembic.
Write efficient queries and use transactions when needed.

### Developer Workflow

#### Creating a New Module

##### Module Setup
Create a new folder under `backend/app/api/modules/[module]`.
Define routes in `[module].routes.py`, implement business logic in `[module].service.py`, and create Pydantic schemas in `[module].schemas.py`.

##### Registering Routes
Import and include the module’s router in `backend/app/main.py` so that endpoints are accessible.

##### Frontend Integration
Optionally, create a corresponding API client file in `frontend/src/api/[module].api.ts` using React Query hooks.

### Testing & Code Quality

#### Unit & Integration Tests
Use pytest for testing backend modules. Create test files (e.g., `[module].test.py`) in `backend/app/tests/`.

#### Code Style
Use object destructuring for functions with multiple parameters.
Maintain strict type safety and follow PEP 8 conventions.

#### Error Handling
Consistently handle and log errors using the central logger.

### Example API Workflow

Below is a complete example for a hypothetical “posts” module:

1. Database Schema (e.g., packages/db/schema.py)
```python
# Define a sample SQLAlchemy model for posts
from sqlalchemy import Column, Integer, String, Text
from app.core.db import Base

class Post(Base):
    __tablename__ = "posts"
    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, nullable=False)
    content = Column(Text, nullable=False)
    user_id = Column(Integer, nullable=False)
```

2. Service Layer (app/api/posts/posts.service.py)
```python
from app.core.db import session
from app.models.post import Post
from app.api.posts.schemas import PostResponse, PostCreate

async def get_posts() -> list[PostResponse]:
    posts = session.query(Post).all()
    return [PostResponse.from_orm(post) for post in posts]

async def create_post(data: PostCreate) -> PostResponse:
    new_post = Post(**data.dict())
    session.add(new_post)
    session.commit()
    session.refresh(new_post)
    return PostResponse.from_orm(new_post)
```

3. Route Layer (app/api/posts/posts.routes.py)
```python
from fastapi import APIRouter, Depends, HTTPException
from app.api.posts.schemas import PostResponse, PostCreate
from app.services.posts.posts_service import get_posts, create_post
from app.core.security import get_current_user

router = APIRouter(prefix="/posts", tags=["posts"])

@router.get("/", response_model=list[PostResponse])
async def list_posts(current_user: dict = Depends(get_current_user)):
    return await get_posts()

@router.post("/", response_model=PostResponse)
async def add_post(data: PostCreate, current_user: dict = Depends(get_current_user)):
    try:
        post = await create_post(data)
        return post
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
```

4. Frontend API Client (frontend/src/api/posts.api.ts)
```typescript
import axios from "axios";
import { useQuery, useMutation } from "react-query";

// Fetch posts using a type-safe API call
export async function getPosts() {
  const response = await axios.get("/api/posts");
  return response.data;
}

export function usePosts() {
  return useQuery("posts", getPosts);
}

// Create a new post using mutation
export async function createPost(params: { title: string; content: string; userId: number; }) {
  const response = await axios.post("/api/posts", params);
  return response.data;
}

export function useCreatePost() {
  return useMutation(createPost);
}
```

## Package Management & Development

### Package Manager
Use pipenv or Poetry for the Python backend.
Install dependencies with `pipenv install [package]` or `poetry add [package]`.

### Monorepo Management
The project uses TurboRepo to manage the backend and frontend.
Run the entire project using `turbo dev` from the root.

### Running Scripts

#### Local Development
Run the backend with Uvicorn: `uvicorn app.main:app --reload`.
Use `bun run [script]` for any custom scripts if needed.

#### Deployment
Containerize the backend with Docker.
Use a Procfile for Heroku deployment.






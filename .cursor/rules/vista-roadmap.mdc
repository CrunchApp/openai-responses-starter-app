---
description: Understanding the project and its overview
globs: 
alwaysApply: true
---

You're the CTO of Vista. You're going to create Vista Education Adviser based on the model  openai-responses-starter-app repository, a clone of which you've been given to begin with. Create Vista according to the provided Roadmap.

# Vista Education Adviser PoC – Roadmap

The Vista Education Adviser Proof of Concept (PoC) will target core features with a lean, cost‐effective approach. The focus areas include:

- **Personalized Recommendation Engine:**  
  Provide tailored education/career paths based on a user’s profile. Initially, use a simple rule‐based system to generate recommendations, with plans to incorporate AI‐driven logic later for more sophisticated matching.

- **AI Chatbot Guidance:**  
  Integrate an AI‐powered chatbot (using OpenAI’s API) to answer user queries and offer guidance. This chatbot will simulate a counseling session, providing answers about programs, application tips, etc., and refine its responses by “learning” from conversation history.

- **User Authentication (Email & Social Login):**  
  Implement secure authentication. Support standard email/password sign-up (with hashed passwords) and social logins via Google and LinkedIn OAuth for quick onboarding, ensuring a unified user account regardless of sign‐in method.

- **External Integrations:**  
  Enhance user profiles and recommendations by importing external data.  
  • Allow LinkedIn profile import (education, experience) via OAuth2 with proper permissions.  
  • Optionally, perform Google searches (using the Custom Search API) to fetch program details or rankings.  
  • Enable document uploads (transcripts, SOPs) for completeness.  
  These integrations will be modular and optional, enriching the experience without blocking core functionality if unavailable.

- **Cost-Efficient Deployment:**  
  Deploy the PoC on minimal-cost tiers.  
  • Use **Vercel** for hosting the Next.js frontend (leveraging its free tier and optimized Next.js support).  
  • Use **Heroku** for the FastAPI backend (using free dynos and add-ons).  
  Both platforms’ free-tier limitations (e.g. Heroku dyno sleep, Vercel function limits) will be monitored to ensure cost efficiency.

---

## 1. Blueprint for the PoC

### A. Requirements Gathering & System Overview

- **User Stories & Use Cases:**
  - **Registration & Onboarding:**  
    Users can sign up using email/password or social logins (Google and LinkedIn). After sign-up, they complete a profile by entering personal, educational, and career information (or by importing data from LinkedIn).
  - **Personalized Recommendations:**  
    After profile completion, users can request education/career path recommendations via a rule-based matching engine that filters a sample dataset based on attributes (e.g. field of interest, preferred country, budget).
  - **Chatbot Guidance:**  
    Users interact with an AI-powered chatbot to ask questions about programs, application tips, etc. The chatbot calls third-party AI APIs (OpenAI, Anthropic) and returns natural-language responses.
  - **Document Uploads:**  
    Users can upload documents (transcripts, SOPs) to be processed or stored as part of their profile.

- **Data Flow & Services:**
  - **Authentication & User Management:**  
    User data is stored securely in a PostgreSQL database. The authentication service issues JWT tokens for API calls.
  - **Profile Management:**  
    User profiles (personal details, education, career goals) are maintained by a dedicated profile service, optionally enriched via LinkedIn import.
  - **Recommendation Engine:**  
    Processes the user’s profile with a rule-based engine to filter and rank a set of pre-defined education programs, returning a list of suggestions.
  - **AI Chatbot Service:**  
    Accepts user queries, composes prompts (with context), calls a third-party AI API (OpenAI/Anthropic), and returns a natural-language response.
  - **External Integrations:**  
    • **LinkedIn Import:** Uses OAuth2 to fetch basic profile data and pre-populate user profiles.  
    • **Google Custom Search:** Optionally enriches program details.  
    • **File Uploads:** Accepts user document uploads for processing or reference.

- **Security & GDPR Compliance:**  
  - **Data Minimization:** Only essential data is stored.  
  - **User Consent:** Explicit consent is obtained for social data import and file uploads.  
  - **Data Protection:** Use HTTPS, encrypt sensitive data at rest, hash passwords, and support user data deletion.

- **Deployment Environment:**
  - **Frontend:** Hosted on Vercel for cost efficiency and fast global CDN.
  - **Backend:** Hosted on Heroku using free/low-cost dynos and a managed PostgreSQL add-on.
  - **Future-Proofing:** Architecture is modular to swap out third-party AI APIs with self-hosted models later.

---

### B. System Architecture Overview

The PoC is structured as a set of microservices (or logical modules within a monorepo) in the backend, exposing RESTful endpoints consumed by the Next.js frontend.

- **Backend (FastAPI):**
  - `/api/auth/` – Handles authentication (registration, login, social OAuth callbacks).
  - `/api/profile/` – Manages user profile creation, updates, and LinkedIn import.
  - `/api/recommendations/` – Processes user profiles and returns tailored recommendations using rule-based logic.
  - `/api/chatbot/` – Forwards user queries to third-party AI APIs and returns AI-generated responses.
  - `/api/uploads/` – Handles file uploads for transcripts/SOPs.

- **Frontend (Next.js with TypeScript):**
  - **Pages:** Login, signup, profile setup, recommendations, and chatbot interaction.
  - **Components:** Reusable UI elements such as forms, recommendation cards, and chat windows.

- **Data Layer:**
  - **Database:** PostgreSQL for structured data (user profiles, recommendation logs).
  - **Caching (optional):** In-memory caching for frequent API responses to optimize costs and response times.

- **Third-Party Services:**
  - **AI API:** OpenAI/Anthropic for chatbot responses.
  - **LinkedIn API:** For social profile import.
  - **Google Custom Search:** For enriching program details.

- **Inter-Service Communication:**
  - Services communicate via well-defined REST endpoints.  
  - The backend uses middleware for logging, JWT authentication, and error handling.

---

## 2. Suggested Project Directory Structure


vista-education-adviser/          # Root of the project repository
├── backend/                     # FastAPI backend services
│   ├── app/                     # Main application package
│   │   ├── api/                 # API routes for various modules
│   │   │   ├── auth/            # Authentication module
│   │   │   │   ├── routes.py    # Endpoints for login, signup, OAuth callbacks
│   │   │   │   ├── schemas.py   # Pydantic models for auth data
│   │   │   │   └── controllers.py  # Business logic for auth
│   │   │   ├── profile/         # User profile management
│   │   │   │   ├── routes.py    # Endpoints for profile CRUD and LinkedIn import
│   │   │   │   └── schemas.py   # Models for user profile
│   │   │   ├── recommendations/ # Recommendation service endpoints
│   │   │   │   ├── routes.py    # Endpoint to generate recommendations
│   │   │   │   ├── engine.py    # Rule-based recommendation logic (and future AI hook)
│   │   │   │   └── schemas.py   # Data models for recommendations
│   │   │   ├── chatbot/         # AI Chatbot endpoints
│   │   │   │   ├── routes.py    # Endpoint to handle user queries
│   │   │   │   ├── ai_client.py # Integration with OpenAI/Anthropic APIs
│   │   │   │   └── schemas.py   # Models for chat messages
│   │   │   └── uploads/         # File upload endpoints for transcripts/SOPs
│   │   │       └── routes.py
│   │   ├── core/                # Core configurations and utilities
│   │   │   ├── config.py        # Environment configuration (DB, API keys, etc.)
│   │   │   └── security.py      # Password hashing, JWT token utilities
│   │   ├── models/              # ORM models (SQLAlchemy) for database tables
│   │   │   ├── user.py          # User model with fields and relationships
│   │   │   ├── recommendation.py# Recommendation result model
│   │   │   └── document.py      # Model for uploaded documents
│   │   ├── services/            # Business logic services that interface with models
│   │   │   ├── auth_service.py  # Functions for registering/logging in users
│   │   │   ├── recommendation_service.py  # Logic for processing recommendations
│   │   │   ├── chatbot_service.py           # Abstraction for AI chatbot calls
│   │   │   └── linkedin_service.py          # Helper functions for LinkedIn integration
│   │   ├── tests/               # Unit and integration tests for backend components
│   │   │   ├── test_auth.py
│   │   │   ├── test_profile.py
│   │   │   ├── test_recommendations.py
│   │   │   └── test_chatbot.py
│   │   └── main.py              # Entry point: creates FastAPI instance, includes routes
│   ├── migrations/              # Database migration scripts (e.g., Alembic)
│   ├── requirements.txt         # Python dependencies list
│   └── Procfile                 # Heroku configuration for starting the backend
├── frontend/                    # Next.js frontend application
│   ├── components/              # Reusable UI components
│   │   ├── auth/                # Components for login/sign-up forms
│   │   │   ├── LoginForm.tsx
│   │   │   └── SignupForm.tsx
│   │   ├── profile/             # Components for the profile onboarding form
│   │   │   └── ProfileForm.tsx
│   │   ├── recommendations/     # Components to display recommendation cards
│   │   │   └── RecommendationCard.tsx
│   │   ├── chatbot/             # Chatbot UI components (chat window, messages)
│   │   │   ├── ChatWindow.tsx
│   │   │   └── ChatMessage.tsx
│   │   └── common/              # Shared components (e.g., navigation bar)
│   │       └── Navbar.tsx
│   ├── pages/                   # Next.js pages (routing based on file structure)
│   │   ├── index.tsx            # Landing page
│   │   ├── login.tsx            # Login page
│   │   ├── signup.tsx           # Signup page
│   │   ├── profile.tsx          # Profile onboarding page
│   │   ├── recommendations.tsx  # Page to display recommendations
│   │   └── chatbot.tsx          # Dedicated page (or modal route) for the chatbot
│   ├── public/                  # Public assets (images, icons, fonts)
│   ├── styles/                  # Global CSS or utility styles (e.g., Tailwind config)
│   │   └── globals.css
│   ├── next.config.js           # Next.js configuration file
│   ├── package.json             # NPM dependencies and scripts
│   └── tsconfig.json            # TypeScript configuration
├── docs/                        # Documentation for the project
│   ├── architecture.md          # Detailed system architecture and data flow diagrams
│   ├── requirements.md          # Functional and non-functional requirements
│   └── design.md                # UI/UX design, wireframes, and style guide
├── scripts/                     # Deployment or maintenance scripts
│   └── deploy.sh                # Example deployment script (if needed)
├── .gitignore                   # Files and folders to exclude from Git
└── README.md 


---

## 3. How Data and Services Work Together

### User Flow & Data Interaction

1. **User Authentication & Onboarding:**
   - **Frontend:**  
     - User visits the landing page, then chooses to sign up/login (email/password or social).
     - Authentication forms (from `/components/auth/`) send requests to `/api/auth/` endpoints.
   - **Backend:**  
     - Authentication Service validates credentials, creates user records (in `models/user.ts`), and returns a JWT.
     - OAuth flows (handled in `/api/auth/`) import social data (e.g., LinkedIn).

2. **Profile Completion & Data Storage:**
   - **Frontend:**  
     - After login, users fill out a multi-step profile form (`ProfileForm.tsx`), optionally importing data from LinkedIn.
   - **Backend:**  
     - Profile API (`/api/profile/`) validates and stores profile data in the database.

3. **Generating Recommendations:**
   - **Frontend:**  
     - On the recommendations page (`recommendations.tsx`), the user requests tailored education/career suggestions.
   - **Backend:**  
     - Recommendation Service (`/api/recommendations/routes.ts`) uses a rule-based engine (in `engine.ts`) to filter and rank pre-defined programs, returning suggestions.

4. **Chatbot Interaction:**
   - **Frontend:**  
     - The Chatbot UI (`ChatWindow.tsx`) allows users to submit questions.
   - **Backend:**  
     - Chatbot Service (`/api/chatbot/routes.ts`) forwards queries to the AI client (in `ai_client.ts`) and returns LLM-generated responses.

5. **Document Uploads:**
   - **Frontend:**  
     - Users can upload documents via file inputs.
   - **Backend:**  
     - Upload Service (`/api/uploads/routes.ts`) handles file reception and storage (temporary or cloud-based).

6. **Data Security & Compliance:**
   - All endpoints are secured with JWT tokens and proper input validation.
   - Sensitive data is encrypted and handled according to GDPR requirements.

---


